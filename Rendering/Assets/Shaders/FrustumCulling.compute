#pragma kernel FrustumCulling

RWTexture2D<float4> Result;


struct NodeData
{
    float3 center;
    float3 size;
    int lodLevel;
};

RWStructuredBuffer<NodeData> Nodes;
uint _NodeCount;
AppendStructuredBuffer<uint> VisibleInstances;
float4x4 _ViewProjMatrix;

bool IsAABBVisible(float3 min, float3 max, float4x4 viewProjMatrix)
{
    // AABB视锥体检测
    float4 corners[8];
    corners[0] = float4(min.x, min.y, min.z, 1.0);
    corners[1] = float4(max.x, min.y, min.z, 1.0);
    corners[2] = float4(min.x, max.y, min.z, 1.0);
    corners[3] = float4(max.x, max.y, min.z, 1.0);
    corners[4] = float4(min.x, min.y, max.z, 1.0);
    corners[5] = float4(max.x, min.y, max.z, 1.0);
    corners[6] = float4(min.x, max.y, max.z, 1.0);
    corners[7] = float4(max.x, max.y, max.z, 1.0);

    bool inside = false;

    for (int p = 0; p < 6; p++)
    {
        int outCount = 8;
        for (int i = 0; i < 8; i++)
        {
            float4 clipPos = mul(viewProjMatrix, corners[i]);
            if (p < 4 && clipPos[p % 4] > clipPos.w)
            {
                outCount--;
            }
            if (p >= 4 && clipPos[p % 2] < -clipPos.w)
            {
                outCount--;
            }
        }
        if (outCount == 0)
        {
            return false;
        }
        if (outCount < 8)
        {
            inside = true;
        }
    }
    return inside;
}

[numthreads(64,1,1)]
void FrustumCulling(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= _NodeCount)
        return;
    NodeData node = Nodes[index];
    // 构造世界空间AABB
    float3 min = node.center - node.size * 0.5f;
    float3 max = node.center + node.size * 0.5f;
    // 快速视锥体剔除
    if (IsAABBVisible(min, max, _ViewProjMatrix))
    {
        VisibleInstances.Append(index);
    }
}

// 层级式GPU剔除
[numnumthreads(64,1,1)]
void HierarchicalCulling(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;
    if (index >= _NodeCount)
        return;
    NodeData node = Nodes[index];

    // 第一级：距离剔除
    //float distance = length(node.center - _CameraPos);
}
