#pragma kernel CullClusterWithShadow
#include "../../CommonInclude/GPUDrivenCommon.hlsl"
#include "Assets/Resources/Shader/Include/GpuCullHelper.hlsl"
#pragma enable_d3d11_debug_symbols
uint _NumObject;
float3 _WorldCenterOffset; //大世界中心位置偏移

float _ShadowDistance;
float3 _MainCameraPos;
uniform float4 _CameraFrustumPlanes[6];

StructuredBuffer<ClusterData> _AllClusterData;
RWStructuredBuffer<uint> _ClusterIndirectArgs; //本身+阴影
RWStructuredBuffer<int> _CullShadowClusterIds;
RWStructuredBuffer<int> _CullClusterIds;

//用保守的距离判断粗略裁剪即可，比较两个球体是否相交

bool CullShadowCluster(GpuBounds bounds)
{
    float3 center = (bounds.max + bounds.min) / 2.0f;
    const float radius = length((bounds.max - bounds.min) / 2.0f);
    float dis = distance(_MainCameraPos, center);
    return dis > radius + _ShadowDistance;
}


//视锥裁剪
bool FrustumCull(GpuBounds bounds)
{
    return FrustumCullAABB(bounds);
}


[numthreads(64,1,1)]
void CullClusterWithShadow(uint3 id : SV_DispatchThreadID)
{
    const int clusterCount = ((_NumObject - 1) / 64) + 1;
    if (id.x >= clusterCount)
        return;
    const ClusterData data = _AllClusterData[id.x];
    GpuBounds clusterBounds = data.bounds;
    clusterBounds.min += _WorldCenterOffset;
    clusterBounds.max += _WorldCenterOffset;

    if (!FrustumCull(clusterBounds))
    {
        int curIndex = 0;
        InterlockedAdd(_ClusterIndirectArgs[0], 1, curIndex);
        _CullClusterIds[curIndex] = id.x;
    }

    if (CheckBoundsAndSphereIntersect(clusterBounds, _MainCameraPos, _ShadowDistance))
    {
        int curIndex = 0;
        InterlockedAdd(_ClusterIndirectArgs[3], 1, curIndex);
        _CullShadowClusterIds[curIndex] = id.x;
    }
}
