#pragma kernel FrustumCulling

// 节点数据结构
struct NodeData
{
    float3 center;
    float3 size;
    int lodLevel;
};

// 常量缓冲区
cbuffer CullingParams
{
    matrix _ViewProjMatrix;
    int nodeCount;
};

// LOD距离参数
float _LODDistances[8];
float3 _CameraPos;

// 输入输出缓冲区
StructuredBuffer<NodeData> _Nodes;
AppendStructuredBuffer<int> _VisibleIndices;

// 获取视锥体平面
void GetFrustumPlanes(matrix viewProj, out float4 planes[6])
{
    planes[0] = viewProj._14 + viewProj._11; // Left
    planes[1] = viewProj._14 - viewProj._11; // Right
    planes[2] = viewProj._14 + viewProj._12; // Bottom
    planes[3] = viewProj._14 - viewProj._12; // Top
    planes[4] = viewProj._14 + viewProj._13; // Near
    planes[5] = viewProj._14 - viewProj._13; // Far

    // 标准化平面
    for (int i = 0; i < 6; i++)
    {
        float planeLength = length(planes[i].xyz);
        planes[i] /= planeLength;
    }
}

// 视锥体剔除函数
bool IsVisible(float3 center, float3 extents)
{
    // 计算视锥体平面
    float4 planes[6];
    GetFrustumPlanes(_ViewProjMatrix, planes);

    for (int i = 0; i < 6; i++)
    {
        float3 normal = planes[i].xyz;
        float d = planes[i].w;

        float distance = dot(center, normal) + d;
        float radius = dot(extents, abs(normal));

        if (distance + radius < 0) return false;
    }
    return true;
}

[numthreads(64,1,1)]
void FrustumCulling(uint3 id : SV_DispatchThreadID)
{
    uint idx = id.x;
    if (idx >= nodeCount) return;

    NodeData node = _Nodes[idx];

    // 1.LOD距离剔除
    float dist = distance(node.center, _CameraPos);
    if (dist > _LODDistances[node.lodLevel])
    {
        return;
    }
    // 2.视锥体剔除
    float3 extents = node.size * 0.5;
    if (!IsVisible(node.center, extents))
    {
        return;
    }

    if (IsVisible(node.center, extents))
    {
        _VisibleIndices.Append(idx);
    }
}
